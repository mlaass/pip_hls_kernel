#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("out_r_TDATA", 8, hls_out, 0, "axis", "out_data", 1),
	Port_Property("out_r_TVALID", 1, hls_out, 0, "axis", "out_vld", 1),
	Port_Property("out_r_TREADY", 1, hls_in, 0, "axis", "out_acc", 1),
	Port_Property("points_TDATA", 24, hls_in, 1, "axis", "in_data", 1),
	Port_Property("points_TVALID", 1, hls_in, 1, "axis", "in_vld", 1),
	Port_Property("points_TREADY", 1, hls_out, 1, "axis", "in_acc", 1),
	Port_Property("edges_Addr_A", 32, hls_out, 2, "bram", "MemPortADDR2", 1),
	Port_Property("edges_EN_A", 1, hls_out, 2, "bram", "MemPortCE2", 1),
	Port_Property("edges_WEN_A", 4, hls_out, 2, "bram", "MemPortWE2", 1),
	Port_Property("edges_Din_A", 32, hls_out, 2, "bram", "MemPortDIN2", 1),
	Port_Property("edges_Dout_A", 32, hls_in, 2, "bram", "MemPortDOUT2", 1),
	Port_Property("edges_Clk_A", 1, hls_out, 2, "bram", "mem_clk", 1),
	Port_Property("edges_Rst_A", 1, hls_out, 2, "bram", "mem_rst", 1),
	Port_Property("edges_Addr_B", 32, hls_out, 2, "bram", "MemPortADDR2", 1),
	Port_Property("edges_EN_B", 1, hls_out, 2, "bram", "MemPortCE2", 1),
	Port_Property("edges_WEN_B", 4, hls_out, 2, "bram", "MemPortWE2", 1),
	Port_Property("edges_Din_B", 32, hls_out, 2, "bram", "MemPortDIN2", 1),
	Port_Property("edges_Dout_B", 32, hls_in, 2, "bram", "MemPortDOUT2", 1),
	Port_Property("edges_Clk_B", 1, hls_out, 2, "bram", "mem_clk", 1),
	Port_Property("edges_Rst_B", 1, hls_out, 2, "bram", "mem_rst", 1),
	Port_Property("s_axi_control_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWADDR", 5, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_ARADDR", 5, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "pip_kernel";
