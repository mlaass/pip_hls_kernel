// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pip_kernel_pip_kernel,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.396500,HLS_SYN_LAT=35850,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=1430,HLS_SYN_LUT=1845,HLS_VERSION=2022_1}" *)

module pip_kernel (
        ap_clk,
        ap_rst_n,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        points_TDATA,
        points_TVALID,
        points_TREADY,
        edges_Addr_A,
        edges_EN_A,
        edges_WEN_A,
        edges_Din_A,
        edges_Dout_A,
        edges_Clk_A,
        edges_Rst_A,
        edges_Addr_B,
        edges_EN_B,
        edges_WEN_B,
        edges_Din_B,
        edges_Dout_B,
        edges_Clk_B,
        edges_Rst_B,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [7:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
input  [23:0] points_TDATA;
input   points_TVALID;
output   points_TREADY;
output  [31:0] edges_Addr_A;
output   edges_EN_A;
output  [3:0] edges_WEN_A;
output  [31:0] edges_Din_A;
input  [31:0] edges_Dout_A;
output   edges_Clk_A;
output   edges_Rst_A;
output  [31:0] edges_Addr_B;
output   edges_EN_B;
output  [3:0] edges_WEN_B;
output  [31:0] edges_Din_B;
input  [31:0] edges_Dout_B;
output   edges_Clk_B;
output   edges_Rst_B;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] strm_len;
reg   [9:0] div_table_V_address0;
reg    div_table_V_ce0;
reg    div_table_V_we0;
wire   [17:0] div_table_V_q0;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
reg    points_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln164_1_fu_118_p2;
wire   [17:0] tmp_fu_124_p1;
reg   [17:0] tmp_reg_158;
wire   [15:0] i_fu_128_p2;
reg   [15:0] i_reg_163;
wire   [0:0] icmp_ln164_fu_134_p2;
reg   [0:0] icmp_ln164_reg_168;
wire    grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start;
wire    grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done;
wire    grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_idle;
wire    grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_ready;
wire   [9:0] grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_address0;
wire    grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_ce0;
wire    grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_we0;
wire   [17:0] grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_d0;
wire    grp_pip_edges_fu_108_ap_start;
wire    grp_pip_edges_fu_108_ap_done;
wire    grp_pip_edges_fu_108_ap_idle;
wire    grp_pip_edges_fu_108_ap_ready;
wire   [17:0] grp_pip_edges_fu_108_py;
wire   [31:0] grp_pip_edges_fu_108_edges_Addr_A;
wire    grp_pip_edges_fu_108_edges_EN_A;
wire   [3:0] grp_pip_edges_fu_108_edges_WEN_A;
wire   [31:0] grp_pip_edges_fu_108_edges_Din_A;
wire   [31:0] grp_pip_edges_fu_108_edges_Addr_B;
wire    grp_pip_edges_fu_108_edges_EN_B;
wire   [3:0] grp_pip_edges_fu_108_edges_WEN_B;
wire   [31:0] grp_pip_edges_fu_108_edges_Din_B;
wire   [9:0] grp_pip_edges_fu_108_div_table_V_address0;
wire    grp_pip_edges_fu_108_div_table_V_ce0;
wire   [5:0] grp_pip_edges_fu_108_ap_return;
reg    grp_pip_edges_fu_108_ap_ce;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state20;
reg   [15:0] i_12_reg_91;
reg    grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start_reg;
reg    ap_block_state1_ignore_call13;
reg    grp_pip_edges_fu_108_ap_start_reg;
reg   [19:0] ap_NS_fsm;
wire    ap_NS_fsm_state4;
wire    regslice_both_out_r_U_apdone_blk;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
wire   [7:0] out_r_TDATA_int_regslice;
reg    out_r_TVALID_int_regslice;
wire    out_r_TREADY_int_regslice;
wire    regslice_both_out_r_U_vld_out;
wire    regslice_both_points_U_apdone_blk;
wire   [23:0] points_TDATA_int_regslice;
wire    points_TVALID_int_regslice;
reg    points_TREADY_int_regslice;
wire    regslice_both_points_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 20'd1;
#0 grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start_reg = 1'b0;
#0 grp_pip_edges_fu_108_ap_start_reg = 1'b0;
end

pip_kernel_div_table_V_RAM_AUTO_1R1W #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
div_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(div_table_V_address0),
    .ce0(div_table_V_ce0),
    .we0(div_table_V_we0),
    .d0(grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_d0),
    .q0(div_table_V_q0)
);

pip_kernel_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start),
    .ap_done(grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done),
    .ap_idle(grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_idle),
    .ap_ready(grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_ready),
    .div_table_V_address0(grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_address0),
    .div_table_V_ce0(grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_ce0),
    .div_table_V_we0(grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_we0),
    .div_table_V_d0(grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_d0)
);

pip_kernel_pip_edges grp_pip_edges_fu_108(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pip_edges_fu_108_ap_start),
    .ap_done(grp_pip_edges_fu_108_ap_done),
    .ap_idle(grp_pip_edges_fu_108_ap_idle),
    .ap_ready(grp_pip_edges_fu_108_ap_ready),
    .px(tmp_reg_158),
    .py(grp_pip_edges_fu_108_py),
    .edges_Addr_A(grp_pip_edges_fu_108_edges_Addr_A),
    .edges_EN_A(grp_pip_edges_fu_108_edges_EN_A),
    .edges_WEN_A(grp_pip_edges_fu_108_edges_WEN_A),
    .edges_Din_A(grp_pip_edges_fu_108_edges_Din_A),
    .edges_Dout_A(edges_Dout_A),
    .edges_Addr_B(grp_pip_edges_fu_108_edges_Addr_B),
    .edges_EN_B(grp_pip_edges_fu_108_edges_EN_B),
    .edges_WEN_B(grp_pip_edges_fu_108_edges_WEN_B),
    .edges_Din_B(grp_pip_edges_fu_108_edges_Din_B),
    .edges_Dout_B(edges_Dout_B),
    .div_table_V_address0(grp_pip_edges_fu_108_div_table_V_address0),
    .div_table_V_ce0(grp_pip_edges_fu_108_div_table_V_ce0),
    .div_table_V_q0(div_table_V_q0),
    .ap_return(grp_pip_edges_fu_108_ap_return),
    .ap_ce(grp_pip_edges_fu_108_ap_ce)
);

pip_kernel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .strm_len(strm_len),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

pip_kernel_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TDATA_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(out_r_TREADY_int_regslice),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_r_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_U_apdone_blk)
);

pip_kernel_regslice_both #(
    .DataWidth( 24 ))
regslice_both_points_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(points_TDATA),
    .vld_in(points_TVALID),
    .ack_in(regslice_both_points_U_ack_in),
    .data_out(points_TDATA_int_regslice),
    .vld_out(points_TVALID_int_regslice),
    .ack_out(points_TREADY_int_regslice),
    .apdone_blk(regslice_both_points_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_out_r_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state20))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pip_edges_fu_108_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_NS_fsm_state4))) begin
            grp_pip_edges_fu_108_ap_start_reg <= 1'b1;
        end else if ((grp_pip_edges_fu_108_ap_ready == 1'b1)) begin
            grp_pip_edges_fu_108_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start_reg <= 1'b1;
        end else if ((grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_ready == 1'b1)) begin
            grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done == 1'b1) & (icmp_ln164_1_fu_118_p2 == 1'd0))) begin
        i_12_reg_91 <= 16'd0;
    end else if (((out_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln164_reg_168 == 1'd0))) begin
        i_12_reg_91 <= i_reg_163;
    end
end

always @ (posedge ap_clk) begin
    if (((points_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_163 <= i_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln164_reg_168 <= icmp_ln164_fu_134_p2;
        tmp_reg_158 <= tmp_fu_124_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((out_r_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_r_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_out_r_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((points_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((points_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((regslice_both_out_r_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state20))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_r_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state20))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        div_table_V_address0 = grp_pip_edges_fu_108_div_table_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        div_table_V_address0 = grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_address0;
    end else begin
        div_table_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        div_table_V_ce0 = grp_pip_edges_fu_108_div_table_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        div_table_V_ce0 = grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_ce0;
    end else begin
        div_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        div_table_V_we0 = grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_we0;
    end else begin
        div_table_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state2) | ((points_TVALID_int_regslice == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((out_r_TREADY_int_regslice == 1'b0) & (1'b1 == ap_CS_fsm_state18)))) begin
        grp_pip_edges_fu_108_ap_ce = 1'b0;
    end else begin
        grp_pip_edges_fu_108_ap_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int_regslice;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_r_TVALID_int_regslice = 1'b1;
    end else begin
        out_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        points_TDATA_blk_n = points_TVALID_int_regslice;
    end else begin
        points_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((points_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((points_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        points_TREADY_int_regslice = 1'b1;
    end else begin
        points_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done == 1'b1) & (icmp_ln164_1_fu_118_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state2) & (grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done == 1'b1) & (icmp_ln164_1_fu_118_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((points_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((points_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((out_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((out_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln164_reg_168 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((out_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln164_reg_168 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((regslice_both_out_r_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state4 = ap_NS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call13 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign edges_Addr_A = grp_pip_edges_fu_108_edges_Addr_A;

assign edges_Addr_B = grp_pip_edges_fu_108_edges_Addr_B;

assign edges_Clk_A = ap_clk;

assign edges_Clk_B = ap_clk;

assign edges_Din_A = 32'd0;

assign edges_Din_B = 32'd0;

assign edges_EN_A = grp_pip_edges_fu_108_edges_EN_A;

assign edges_EN_B = grp_pip_edges_fu_108_edges_EN_B;

assign edges_Rst_A = ap_rst_n_inv;

assign edges_Rst_B = ap_rst_n_inv;

assign edges_WEN_A = 4'd0;

assign edges_WEN_B = 4'd0;

assign grp_pip_edges_fu_108_ap_start = grp_pip_edges_fu_108_ap_start_reg;

assign grp_pip_edges_fu_108_py = points_TDATA_int_regslice[17:0];

assign grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start = grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start_reg;

assign i_fu_128_p2 = (i_12_reg_91 + 16'd1);

assign icmp_ln164_1_fu_118_p2 = ((strm_len == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_134_p2 = ((i_fu_128_p2 == strm_len) ? 1'b1 : 1'b0);

assign out_r_TDATA_int_regslice = grp_pip_edges_fu_108_ap_return;

assign out_r_TVALID = regslice_both_out_r_U_vld_out;

assign points_TREADY = regslice_both_points_U_ack_in;

assign tmp_fu_124_p1 = points_TDATA_int_regslice[17:0];

endmodule //pip_kernel
