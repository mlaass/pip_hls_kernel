-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pip_kernel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    points_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    points_TVALID : IN STD_LOGIC;
    points_TREADY : OUT STD_LOGIC;
    edges_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    edges_EN_A : OUT STD_LOGIC;
    edges_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    edges_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    edges_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    edges_Clk_A : OUT STD_LOGIC;
    edges_Rst_A : OUT STD_LOGIC;
    edges_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    edges_EN_B : OUT STD_LOGIC;
    edges_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    edges_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    edges_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    edges_Clk_B : OUT STD_LOGIC;
    edges_Rst_B : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pip_kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pip_kernel_pip_kernel,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.396500,HLS_SYN_LAT=35850,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=1430,HLS_SYN_LUT=1845,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal strm_len : STD_LOGIC_VECTOR (15 downto 0);
    signal div_table_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal div_table_V_ce0 : STD_LOGIC;
    signal div_table_V_we0 : STD_LOGIC;
    signal div_table_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal points_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln164_1_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_124_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_reg_158 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_fu_128_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_163 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln164_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_reg_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start : STD_LOGIC;
    signal grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done : STD_LOGIC;
    signal grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_idle : STD_LOGIC;
    signal grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_ready : STD_LOGIC;
    signal grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_ce0 : STD_LOGIC;
    signal grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_we0 : STD_LOGIC;
    signal grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_pip_edges_fu_108_ap_start : STD_LOGIC;
    signal grp_pip_edges_fu_108_ap_done : STD_LOGIC;
    signal grp_pip_edges_fu_108_ap_idle : STD_LOGIC;
    signal grp_pip_edges_fu_108_ap_ready : STD_LOGIC;
    signal grp_pip_edges_fu_108_py : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_pip_edges_fu_108_edges_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pip_edges_fu_108_edges_EN_A : STD_LOGIC;
    signal grp_pip_edges_fu_108_edges_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pip_edges_fu_108_edges_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pip_edges_fu_108_edges_Addr_B : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pip_edges_fu_108_edges_EN_B : STD_LOGIC;
    signal grp_pip_edges_fu_108_edges_WEN_B : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pip_edges_fu_108_edges_Din_B : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pip_edges_fu_108_div_table_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pip_edges_fu_108_div_table_V_ce0 : STD_LOGIC;
    signal grp_pip_edges_fu_108_ap_return : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pip_edges_fu_108_ap_ce : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_12_reg_91 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call13 : BOOLEAN;
    signal grp_pip_edges_fu_108_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal regslice_both_out_r_U_apdone_blk : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal out_r_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal out_r_TVALID_int_regslice : STD_LOGIC;
    signal out_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_r_U_vld_out : STD_LOGIC;
    signal regslice_both_points_U_apdone_blk : STD_LOGIC;
    signal points_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal points_TVALID_int_regslice : STD_LOGIC;
    signal points_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_points_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pip_kernel_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        div_table_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        div_table_V_ce0 : OUT STD_LOGIC;
        div_table_V_we0 : OUT STD_LOGIC;
        div_table_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component pip_kernel_pip_edges IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        px : IN STD_LOGIC_VECTOR (17 downto 0);
        py : IN STD_LOGIC_VECTOR (17 downto 0);
        edges_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        edges_EN_A : OUT STD_LOGIC;
        edges_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        edges_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        edges_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        edges_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
        edges_EN_B : OUT STD_LOGIC;
        edges_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
        edges_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
        edges_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
        div_table_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        div_table_V_ce0 : OUT STD_LOGIC;
        div_table_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component pip_kernel_div_table_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component pip_kernel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        strm_len : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component pip_kernel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    div_table_V_U : component pip_kernel_div_table_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => div_table_V_address0,
        ce0 => div_table_V_ce0,
        we0 => div_table_V_we0,
        d0 => grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_d0,
        q0 => div_table_V_q0);

    grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102 : component pip_kernel_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start,
        ap_done => grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done,
        ap_idle => grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_idle,
        ap_ready => grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_ready,
        div_table_V_address0 => grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_address0,
        div_table_V_ce0 => grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_ce0,
        div_table_V_we0 => grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_we0,
        div_table_V_d0 => grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_d0);

    grp_pip_edges_fu_108 : component pip_kernel_pip_edges
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pip_edges_fu_108_ap_start,
        ap_done => grp_pip_edges_fu_108_ap_done,
        ap_idle => grp_pip_edges_fu_108_ap_idle,
        ap_ready => grp_pip_edges_fu_108_ap_ready,
        px => tmp_reg_158,
        py => grp_pip_edges_fu_108_py,
        edges_Addr_A => grp_pip_edges_fu_108_edges_Addr_A,
        edges_EN_A => grp_pip_edges_fu_108_edges_EN_A,
        edges_WEN_A => grp_pip_edges_fu_108_edges_WEN_A,
        edges_Din_A => grp_pip_edges_fu_108_edges_Din_A,
        edges_Dout_A => edges_Dout_A,
        edges_Addr_B => grp_pip_edges_fu_108_edges_Addr_B,
        edges_EN_B => grp_pip_edges_fu_108_edges_EN_B,
        edges_WEN_B => grp_pip_edges_fu_108_edges_WEN_B,
        edges_Din_B => grp_pip_edges_fu_108_edges_Din_B,
        edges_Dout_B => edges_Dout_B,
        div_table_V_address0 => grp_pip_edges_fu_108_div_table_V_address0,
        div_table_V_ce0 => grp_pip_edges_fu_108_div_table_V_ce0,
        div_table_V_q0 => div_table_V_q0,
        ap_return => grp_pip_edges_fu_108_ap_return,
        ap_ce => grp_pip_edges_fu_108_ap_ce);

    control_s_axi_U : component pip_kernel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        strm_len => strm_len,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    regslice_both_out_r_U : component pip_kernel_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TDATA_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => out_r_TREADY_int_regslice,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_r_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_U_apdone_blk);

    regslice_both_points_U : component pip_kernel_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => points_TDATA,
        vld_in => points_TVALID,
        ack_in => regslice_both_points_U_ack_in,
        data_out => points_TDATA_int_regslice,
        vld_out => points_TVALID_int_regslice,
        ack_out => points_TREADY_int_regslice,
        apdone_blk => regslice_both_points_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((regslice_both_out_r_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_pip_edges_fu_108_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pip_edges_fu_108_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_NS_fsm_state4))) then 
                    grp_pip_edges_fu_108_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pip_edges_fu_108_ap_ready = ap_const_logic_1)) then 
                    grp_pip_edges_fu_108_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_ready = ap_const_logic_1)) then 
                    grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    i_12_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done = ap_const_logic_1) and (icmp_ln164_1_fu_118_p2 = ap_const_lv1_0))) then 
                i_12_reg_91 <= ap_const_lv16_0;
            elsif (((out_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln164_reg_168 = ap_const_lv1_0))) then 
                i_12_reg_91 <= i_reg_163;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((points_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_reg_163 <= i_fu_128_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln164_reg_168 <= icmp_ln164_fu_134_p2;
                tmp_reg_158 <= tmp_fu_124_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, icmp_ln164_1_fu_118_p2, icmp_ln164_reg_168, grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done, ap_CS_fsm_state20, regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice, points_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done = ap_const_logic_1) and (icmp_ln164_1_fu_118_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done = ap_const_logic_1) and (icmp_ln164_1_fu_118_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((points_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((points_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((out_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((out_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln164_reg_168 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((out_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln164_reg_168 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((regslice_both_out_r_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(out_r_TREADY_int_regslice)
    begin
        if ((out_r_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state19_blk_assign_proc : process(out_r_TREADY_int_regslice)
    begin
        if ((out_r_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(regslice_both_out_r_U_apdone_blk)
    begin
        if ((regslice_both_out_r_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done)
    begin
        if ((grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(points_TVALID_int_regslice)
    begin
        if ((points_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(points_TVALID_int_regslice)
    begin
        if ((points_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call13_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call13 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state20, regslice_both_out_r_U_apdone_blk)
    begin
        if (((regslice_both_out_r_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20, regslice_both_out_r_U_apdone_blk)
    begin
        if (((regslice_both_out_r_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    div_table_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_address0, grp_pip_edges_fu_108_div_table_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            div_table_V_address0 <= grp_pip_edges_fu_108_div_table_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            div_table_V_address0 <= grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_address0;
        else 
            div_table_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    div_table_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_ce0, grp_pip_edges_fu_108_div_table_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            div_table_V_ce0 <= grp_pip_edges_fu_108_div_table_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            div_table_V_ce0 <= grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_ce0;
        else 
            div_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    div_table_V_we0_assign_proc : process(ap_CS_fsm_state2, grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            div_table_V_we0 <= grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_div_table_V_we0;
        else 
            div_table_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    edges_Addr_A <= grp_pip_edges_fu_108_edges_Addr_A;
    edges_Addr_B <= grp_pip_edges_fu_108_edges_Addr_B;
    edges_Clk_A <= ap_clk;
    edges_Clk_B <= ap_clk;
    edges_Din_A <= ap_const_lv32_0;
    edges_Din_B <= ap_const_lv32_0;
    edges_EN_A <= grp_pip_edges_fu_108_edges_EN_A;
    edges_EN_B <= grp_pip_edges_fu_108_edges_EN_B;
    edges_Rst_A <= ap_rst_n_inv;
    edges_Rst_B <= ap_rst_n_inv;
    edges_WEN_A <= ap_const_lv4_0;
    edges_WEN_B <= ap_const_lv4_0;

    grp_pip_edges_fu_108_ap_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state20, out_r_TREADY_int_regslice, points_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((points_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((out_r_TREADY_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_pip_edges_fu_108_ap_ce <= ap_const_logic_0;
        else 
            grp_pip_edges_fu_108_ap_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_pip_edges_fu_108_ap_start <= grp_pip_edges_fu_108_ap_start_reg;
    grp_pip_edges_fu_108_py <= points_TDATA_int_regslice(18 - 1 downto 0);
    grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start <= grp_pip_kernel_Pipeline_LOOP_INIT_DIV_TABLE_fu_102_ap_start_reg;
    i_fu_128_p2 <= std_logic_vector(unsigned(i_12_reg_91) + unsigned(ap_const_lv16_1));
    icmp_ln164_1_fu_118_p2 <= "1" when (strm_len = ap_const_lv16_0) else "0";
    icmp_ln164_fu_134_p2 <= "1" when (i_fu_128_p2 = strm_len) else "0";

    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, out_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int_regslice;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_pip_edges_fu_108_ap_return),8));
    out_r_TVALID <= regslice_both_out_r_U_vld_out;

    out_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state18, out_r_TREADY_int_regslice)
    begin
        if (((out_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    points_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, points_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            points_TDATA_blk_n <= points_TVALID_int_regslice;
        else 
            points_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    points_TREADY <= regslice_both_points_U_ack_in;

    points_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, points_TVALID_int_regslice)
    begin
        if ((((points_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((points_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            points_TREADY_int_regslice <= ap_const_logic_1;
        else 
            points_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_124_p1 <= points_TDATA_int_regslice(18 - 1 downto 0);
end behav;
