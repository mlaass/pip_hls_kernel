-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pip_kernel_pip_crossing2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_x : IN STD_LOGIC_VECTOR (17 downto 0);
    p_y : IN STD_LOGIC_VECTOR (17 downto 0);
    e1_x : IN STD_LOGIC_VECTOR (17 downto 0);
    e1_y : IN STD_LOGIC_VECTOR (17 downto 0);
    e2_x : IN STD_LOGIC_VECTOR (17 downto 0);
    e2_y : IN STD_LOGIC_VECTOR (17 downto 0);
    div_table_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    div_table_V_ce0 : OUT STD_LOGIC;
    div_table_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of pip_kernel_pip_crossing2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln1698_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1698_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1695_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1695_reg_848 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1695_1_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1695_1_reg_853 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1698_1_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1698_1_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_V_fu_213_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal a_V_reg_863 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_2_fu_327_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_2_reg_868 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal vt_V_1_fu_545_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal vt_V_1_reg_888 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal e1_x_read_reg_893 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ret_V_8_fu_575_p2 : STD_LOGIC_VECTOR (36 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_8_fu_575_p2 : signal is "no";
    signal ret_V_8_reg_903 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Result_15_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal ix_V_3_reg_914 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_16_reg_919 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_924 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_reg_929 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_3_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_3_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_reg_941 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_p_x : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_port_reg_e1_x : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_port_reg_e2_x : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln34_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln1698_fu_129_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1698_fu_129_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1695_fu_135_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1695_fu_135_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1695_1_fu_141_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1695_1_fu_141_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1698_1_fu_147_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1698_1_fu_147_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln859_fu_153_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1394_fu_157_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln859_fu_153_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1394_fu_157_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_6_fu_161_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_8_fu_167_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_179_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln941_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln348_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln392_fu_205_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_4_fu_175_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1394_1_fu_221_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1394_1_fu_221_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_7_fu_225_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_10_fu_231_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_243_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln941_1_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln348_1_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln392_2_fu_269_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_6_fu_239_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal b_V_fu_277_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1049_fu_303_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_285_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln1049_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_313_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_s_fu_295_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_fu_319_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_820_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_fu_369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln423_fu_376_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_fu_353_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal vt_V_fu_380_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_14_fu_386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_fu_362_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln942_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_406_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_421_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal carry_1_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln936_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln936_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_442_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln941_2_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_346_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln941_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln941_3_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_469_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln942_1_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln937_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln942_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln942_4_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_3_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln392_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln392_3_fu_531_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_fu_564_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1393_fu_571_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_833_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_8_fu_613_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_629_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln1698_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1698_1_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_1_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln423_1_fu_677_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ix_V_4_fu_680_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_17_fu_685_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln942_2_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_3_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_710_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln936_1_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln936_1_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_704_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln941_4_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln941_1_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln941_5_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_3_fu_728_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln942_3_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln937_1_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln942_1_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln942_5_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_4_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln392_1_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln392_5_fu_786_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ix_V_fu_800_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1696_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_820_ce : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_833_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pip_kernel_mul_mul_18s_18s_36_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component pip_kernel_am_submul_18s_18s_18s_37_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;



begin
    mul_mul_18s_18s_36_4_1_U4 : component pip_kernel_mul_mul_18s_18s_36_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => div_table_V_q0,
        din1 => a_V_reg_863,
        ce => grp_fu_820_ce,
        dout => grp_fu_820_p2);

    am_submul_18s_18s_18s_37_4_1_U5 : component pip_kernel_am_submul_18s_18s_18s_37_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_port_reg_e2_x,
        din1 => ap_port_reg_e1_x,
        din2 => vt_V_1_reg_888,
        ce => grp_fu_833_ce,
        dout => grp_fu_833_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                Range1_all_ones_3_reg_934 <= Range1_all_ones_3_fu_639_p2;
                Range1_all_zeros_1_reg_941 <= Range1_all_zeros_1_fu_645_p2;
                Range2_all_ones_1_reg_929 <= Range2_all_ones_1_fu_623_p2;
                ix_V_3_reg_914 <= ret_V_8_fu_575_p2(25 downto 8);
                p_Result_15_reg_908 <= ret_V_8_fu_575_p2(36 downto 36);
                p_Result_16_reg_919 <= ret_V_8_fu_575_p2(25 downto 25);
                ret_V_8_reg_903 <= ret_V_8_fu_575_p2;
                tmp_10_reg_924 <= grp_fu_833_p3(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                a_V_reg_863 <= a_V_fu_213_p3;
                icmp_ln1695_1_reg_853 <= icmp_ln1695_1_fu_141_p2;
                icmp_ln1695_reg_848 <= icmp_ln1695_fu_135_p2;
                icmp_ln1698_1_reg_858 <= icmp_ln1698_1_fu_147_p2;
                icmp_ln1698_reg_843 <= icmp_ln1698_fu_129_p2;
                ret_V_2_reg_868 <= ret_V_2_fu_327_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ap_port_reg_e1_x <= e1_x;
                ap_port_reg_e2_x <= e2_x;
                ap_port_reg_p_x <= p_x;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                e1_x_read_reg_893 <= ap_port_reg_e1_x;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                vt_V_1_reg_888 <= vt_V_1_fu_545_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_3_fu_639_p2 <= "1" when (tmp_9_fu_629_p4 = ap_const_lv11_7FF) else "0";
    Range1_all_ones_fu_430_p2 <= "1" when (tmp_1_fu_421_p4 = ap_const_lv10_3FF) else "0";
    Range1_all_zeros_1_fu_645_p2 <= "1" when (tmp_9_fu_629_p4 = ap_const_lv11_0) else "0";
    Range1_all_zeros_fu_436_p2 <= "1" when (tmp_1_fu_421_p4 = ap_const_lv10_0) else "0";
    Range2_all_ones_1_fu_623_p2 <= "1" when (tmp_8_fu_613_p4 = ap_const_lv10_3FF) else "0";
    Range2_all_ones_fu_415_p2 <= "1" when (tmp_s_fu_406_p4 = ap_const_lv9_1FF) else "0";
    a_V_fu_213_p3 <= 
        select_ln392_fu_205_p3 when (xor_ln348_fu_199_p2(0) = '1') else 
        p_Val2_4_fu_175_p1;
    and_ln46_1_fu_666_p2 <= (xor_ln1698_1_fu_661_p2 and icmp_ln1695_1_reg_853);
    and_ln46_fu_656_p2 <= (xor_ln1698_fu_651_p2 and icmp_ln1695_reg_848);
    and_ln936_1_fu_723_p2 <= (xor_ln936_1_fu_717_p2 and Range2_all_ones_1_reg_929);
    and_ln936_fu_463_p2 <= (xor_ln936_fu_457_p2 and Range2_all_ones_fu_415_p2);
    and_ln937_1_fu_735_p2 <= (carry_3_fu_699_p2 and Range1_all_ones_3_reg_934);
    and_ln937_fu_477_p2 <= (carry_1_fu_400_p2 and Range1_all_ones_fu_430_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_ce)
    begin
        if (((ap_const_logic_0 = ap_ce) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state11)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (or_ln46_fu_671_p2 and icmp_ln1696_fu_808_p2);
    b_V_fu_277_p3 <= 
        select_ln392_2_fu_269_p3 when (xor_ln348_1_fu_263_p2(0) = '1') else 
        p_Val2_6_fu_239_p1;
    carry_1_fu_400_p2 <= (xor_ln942_fu_394_p2 and p_Result_13_fu_362_p3);
    carry_3_fu_699_p2 <= (xor_ln942_2_fu_693_p2 and p_Result_16_reg_919);
    deleted_ones_3_fu_728_p3 <= 
        and_ln936_1_fu_723_p2 when (carry_3_fu_699_p2(0) = '1') else 
        Range1_all_ones_3_reg_934;
    deleted_ones_fu_469_p3 <= 
        and_ln936_fu_463_p2 when (carry_1_fu_400_p2(0) = '1') else 
        Range1_all_ones_fu_430_p2;
    deleted_zeros_1_fu_704_p3 <= 
        Range1_all_ones_3_reg_934 when (carry_3_fu_699_p2(0) = '1') else 
        Range1_all_zeros_1_reg_941;
    deleted_zeros_fu_442_p3 <= 
        Range1_all_ones_fu_430_p2 when (carry_1_fu_400_p2(0) = '1') else 
        Range1_all_zeros_fu_436_p2;
    div_table_V_address0 <= sext_ln34_fu_335_p1(10 - 1 downto 0);

    div_table_V_ce0_assign_proc : process(ap_ce, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then 
            div_table_V_ce0 <= ap_const_logic_1;
        else 
            div_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_820_ce_assign_proc : process(ap_ce, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_fu_820_ce <= ap_const_logic_1;
        else 
            grp_fu_820_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_833_ce_assign_proc : process(ap_ce, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            grp_fu_833_ce <= ap_const_logic_1;
        else 
            grp_fu_833_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1049_fu_307_p2 <= "1" when (trunc_ln1049_fu_303_p1 = ap_const_lv8_0) else "0";
    icmp_ln1695_1_fu_141_p0 <= e1_y;
    icmp_ln1695_1_fu_141_p1 <= p_y;
    icmp_ln1695_1_fu_141_p2 <= "1" when (signed(icmp_ln1695_1_fu_141_p0) > signed(icmp_ln1695_1_fu_141_p1)) else "0";
    icmp_ln1695_fu_135_p0 <= e2_y;
    icmp_ln1695_fu_135_p1 <= p_y;
    icmp_ln1695_fu_135_p2 <= "1" when (signed(icmp_ln1695_fu_135_p0) > signed(icmp_ln1695_fu_135_p1)) else "0";
    icmp_ln1696_fu_808_p2 <= "1" when (signed(ix_V_fu_800_p3) > signed(ap_port_reg_p_x)) else "0";
    icmp_ln1698_1_fu_147_p0 <= p_y;
    icmp_ln1698_1_fu_147_p1 <= e2_y;
    icmp_ln1698_1_fu_147_p2 <= "1" when (signed(icmp_ln1698_1_fu_147_p0) < signed(icmp_ln1698_1_fu_147_p1)) else "0";
    icmp_ln1698_fu_129_p0 <= p_y;
    icmp_ln1698_fu_129_p1 <= e1_y;
    icmp_ln1698_fu_129_p2 <= "1" when (signed(icmp_ln1698_fu_129_p0) < signed(icmp_ln1698_fu_129_p1)) else "0";
    ix_V_4_fu_680_p2 <= std_logic_vector(unsigned(zext_ln423_1_fu_677_p1) + unsigned(ix_V_3_reg_914));
    ix_V_fu_800_p3 <= 
        select_ln392_5_fu_786_p3 when (or_ln392_1_fu_794_p2(0) = '1') else 
        ix_V_4_fu_680_p2;
    lhs_V_fu_564_p3 <= (e1_x_read_reg_893 & ap_const_lv8_0);
    or_ln392_1_fu_794_p2 <= (underflow_1_fu_781_p2 or overflow_4_fu_757_p2);
    or_ln392_fu_539_p2 <= (underflow_fu_525_p2 or overflow_3_fu_501_p2);
    or_ln46_fu_671_p2 <= (and_ln46_fu_656_p2 or and_ln46_1_fu_666_p2);
    or_ln941_1_fu_746_p2 <= (xor_ln941_4_fu_740_p2 or p_Result_17_fu_685_p3);
    or_ln941_fu_489_p2 <= (xor_ln941_2_fu_483_p2 or p_Result_14_fu_386_p3);
    or_ln942_1_fu_769_p2 <= (xor_ln942_3_fu_763_p2 or xor_ln942_2_fu_693_p2);
    or_ln942_fu_513_p2 <= (xor_ln942_fu_394_p2 or xor_ln942_1_fu_507_p2);
    overflow_2_fu_257_p2 <= (xor_ln941_1_fu_251_p2 and p_Result_11_fu_243_p3);
    overflow_3_fu_501_p2 <= (xor_ln941_3_fu_495_p2 and or_ln941_fu_489_p2);
    overflow_4_fu_757_p2 <= (xor_ln941_5_fu_752_p2 and or_ln941_1_fu_746_p2);
    overflow_fu_193_p2 <= (xor_ln941_fu_187_p2 and p_Result_9_fu_179_p3);
    p_Result_10_fu_231_p3 <= ret_V_7_fu_225_p2(18 downto 18);
    p_Result_11_fu_243_p3 <= ret_V_7_fu_225_p2(17 downto 17);
    p_Result_12_fu_346_p3 <= grp_fu_820_p2(35 downto 35);
    p_Result_13_fu_362_p3 <= grp_fu_820_p2(25 downto 25);
    p_Result_14_fu_386_p3 <= vt_V_fu_380_p2(17 downto 17);
    p_Result_17_fu_685_p3 <= ix_V_4_fu_680_p2(17 downto 17);
    p_Result_8_fu_167_p3 <= ret_V_6_fu_161_p2(18 downto 18);
    p_Result_9_fu_179_p3 <= ret_V_6_fu_161_p2(17 downto 17);
    p_Result_s_fu_295_p3 <= b_V_fu_277_p3(17 downto 17);
    p_Val2_4_fu_175_p1 <= ret_V_6_fu_161_p2(18 - 1 downto 0);
    p_Val2_6_fu_239_p1 <= ret_V_7_fu_225_p2(18 - 1 downto 0);
    p_Val2_8_fu_353_p4 <= grp_fu_820_p2(25 downto 8);
    ret_V_1_fu_313_p2 <= std_logic_vector(unsigned(ret_V_fu_285_p4) + unsigned(ap_const_lv10_1));
    ret_V_2_fu_327_p3 <= 
        select_ln1048_fu_319_p3 when (p_Result_s_fu_295_p3(0) = '1') else 
        ret_V_fu_285_p4;
    ret_V_6_fu_161_p2 <= std_logic_vector(signed(sext_ln859_fu_153_p1) - signed(sext_ln1394_fu_157_p1));
    ret_V_7_fu_225_p2 <= std_logic_vector(signed(sext_ln1394_1_fu_221_p1) - signed(sext_ln1394_fu_157_p1));
    ret_V_8_fu_575_p2 <= std_logic_vector(signed(sext_ln1393_fu_571_p1) + signed(grp_fu_833_p3));
    ret_V_fu_285_p4 <= b_V_fu_277_p3(17 downto 8);
    select_ln1048_fu_319_p3 <= 
        ret_V_fu_285_p4 when (icmp_ln1049_fu_307_p2(0) = '1') else 
        ret_V_1_fu_313_p2;
    select_ln392_2_fu_269_p3 <= 
        ap_const_lv18_1FFFF when (overflow_2_fu_257_p2(0) = '1') else 
        ap_const_lv18_20000;
    select_ln392_3_fu_531_p3 <= 
        ap_const_lv18_1FFFF when (overflow_3_fu_501_p2(0) = '1') else 
        ap_const_lv18_20000;
    select_ln392_5_fu_786_p3 <= 
        ap_const_lv18_1FFFF when (overflow_4_fu_757_p2(0) = '1') else 
        ap_const_lv18_20000;
    select_ln392_fu_205_p3 <= 
        ap_const_lv18_1FFFF when (overflow_fu_193_p2(0) = '1') else 
        ap_const_lv18_20000;
        sext_ln1393_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_564_p3),37));

    sext_ln1394_1_fu_221_p0 <= e2_y;
        sext_ln1394_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1394_1_fu_221_p0),19));

    sext_ln1394_fu_157_p0 <= e1_y;
        sext_ln1394_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1394_fu_157_p0),19));

        sext_ln34_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_2_reg_868),64));

    sext_ln859_fu_153_p0 <= p_y;
        sext_ln859_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln859_fu_153_p0),19));

    tmp_12_fu_710_p3 <= ret_V_8_reg_903(26 downto 26);
    tmp_1_fu_421_p4 <= grp_fu_820_p2(35 downto 26);
    tmp_5_fu_450_p3 <= grp_fu_820_p2(26 downto 26);
    tmp_8_fu_613_p4 <= ret_V_8_fu_575_p2(36 downto 27);
    tmp_9_fu_629_p4 <= ret_V_8_fu_575_p2(36 downto 26);
    tmp_fu_369_p3 <= grp_fu_820_p2(7 downto 7);
    tmp_s_fu_406_p4 <= grp_fu_820_p2(35 downto 27);
    trunc_ln1049_fu_303_p1 <= b_V_fu_277_p3(8 - 1 downto 0);
    underflow_1_fu_781_p2 <= (xor_ln942_5_fu_775_p2 and p_Result_15_reg_908);
    underflow_fu_525_p2 <= (xor_ln942_4_fu_519_p2 and p_Result_12_fu_346_p3);
    vt_V_1_fu_545_p3 <= 
        select_ln392_3_fu_531_p3 when (or_ln392_fu_539_p2(0) = '1') else 
        vt_V_fu_380_p2;
    vt_V_fu_380_p2 <= std_logic_vector(unsigned(zext_ln423_fu_376_p1) + unsigned(p_Val2_8_fu_353_p4));
    xor_ln1698_1_fu_661_p2 <= (icmp_ln1698_1_reg_858 xor ap_const_lv1_1);
    xor_ln1698_fu_651_p2 <= (icmp_ln1698_reg_843 xor ap_const_lv1_1);
    xor_ln348_1_fu_263_p2 <= (p_Result_11_fu_243_p3 xor p_Result_10_fu_231_p3);
    xor_ln348_fu_199_p2 <= (p_Result_9_fu_179_p3 xor p_Result_8_fu_167_p3);
    xor_ln936_1_fu_717_p2 <= (tmp_12_fu_710_p3 xor ap_const_lv1_1);
    xor_ln936_fu_457_p2 <= (tmp_5_fu_450_p3 xor ap_const_lv1_1);
    xor_ln941_1_fu_251_p2 <= (p_Result_10_fu_231_p3 xor ap_const_lv1_1);
    xor_ln941_2_fu_483_p2 <= (deleted_zeros_fu_442_p3 xor ap_const_lv1_1);
    xor_ln941_3_fu_495_p2 <= (p_Result_12_fu_346_p3 xor ap_const_lv1_1);
    xor_ln941_4_fu_740_p2 <= (deleted_zeros_1_fu_704_p3 xor ap_const_lv1_1);
    xor_ln941_5_fu_752_p2 <= (p_Result_15_reg_908 xor ap_const_lv1_1);
    xor_ln941_fu_187_p2 <= (p_Result_8_fu_167_p3 xor ap_const_lv1_1);
    xor_ln942_1_fu_507_p2 <= (deleted_ones_fu_469_p3 xor ap_const_lv1_1);
    xor_ln942_2_fu_693_p2 <= (p_Result_17_fu_685_p3 xor ap_const_lv1_1);
    xor_ln942_3_fu_763_p2 <= (deleted_ones_3_fu_728_p3 xor ap_const_lv1_1);
    xor_ln942_4_fu_519_p2 <= (or_ln942_fu_513_p2 xor and_ln937_fu_477_p2);
    xor_ln942_5_fu_775_p2 <= (or_ln942_1_fu_769_p2 xor and_ln937_1_fu_735_p2);
    xor_ln942_fu_394_p2 <= (p_Result_14_fu_386_p3 xor ap_const_lv1_1);
    zext_ln423_1_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_924),18));
    zext_ln423_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_369_p3),18));
end behav;
